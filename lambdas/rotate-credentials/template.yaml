AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Automation to notify users to rotation their IAM access keys
Globals:
    Function:
        Timeout: 30
Parameters:
  GracePeriod:
    Description: How many days to send the user a warning email before the lockout occurs
    Type: Number
    Default: 7
  DisableKeys:
    Description: Set to True if you want to disabled expired IAM access keys
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  SendReport:
    Description: Send expired credentials report to a notification topic
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  SendEmail:
    Description: Send expired credential notification emails to users
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  SenderEmail:
    Description: A SES verified sender email address
    Type: String
    Default: "My AWS Account <user@example.com>"
  MaxAccessKeyAge:
    Description: The access key expiration period (in days)
    Type: Number
    Default: 180
    MinValue: 7
    MaxValue: 1800
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Platform'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Infrastructure'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
    Default: 'it@sagebase.org'

Resources:
  ExpireAccessKeyFunction:
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python2.7
        CodeUri: expire_access_key/
        Handler: app.lambda_handler
        DeadLetterQueue:
          Type: SNS
          TargetArn: !ImportValue us-east-1-AccountAlertTopics-SNSAlertsErrorArn
        Events:
          CheckAccessKeyScheduledEvent:
            Type: Schedule
            Properties:
              Schedule: rate(1 day)
          ExpireAccessKeyFunctionApi:
            Type: Api
            Properties:
              Path: /check
              Method: get
        Environment:
          Variables:
            GRACE_PERIOD: !Ref GracePeriod
            DISABLE_KEYS: !Ref DisableKeys
            SEND_EMAIL: !Ref SendEmail
            SENDER_EMAIL: !Ref SenderEmail
            SEND_REPORT: !Ref SendReport
            REPORT_TOPIC_ARN: !ImportValue us-east-1-AccountAlertTopics-SNSAlertsInfoArn
            MAX_ACCESS_KEY_AGE: !Ref MaxAccessKeyAge
        Tags:
          Department: !Ref Department
          Project: !Ref Project
          OwnerEmail: !Ref OwnerEmail
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PublishToCloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: EnableAndDisableAccessKeys
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:UpdateAccessKey
                Resource: "*"
        - PolicyName: AccessCredentialsReport
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:GenerateCredentialReport
                  - iam:GetCredentialReport
                Resource: "*"
        - PolicyName: AccessAccountInfo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                  - iam:ListAccountAliases
                  - iam:ListAccessKeys
                  - iam:GetAccountPasswordPolicy
                Resource: "*"
        - PolicyName: SendEmails
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
        - PolicyName: PublishSnsTopic
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsInfoArn
                  - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsErrorArn
                  - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsCriticalArn
  ExpireAccessKeyFunctionFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsErrorArn
      MetricName: !Sub "${ExpireAccessKeyFunction}-FailureAlarm"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ExpireAccessKeyFunction
      EvaluationPeriods: 1
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
Outputs:
  ExpireAccessKeyFunction:
    Value: !Ref ExpireAccessKeyFunction
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ExpireAccessKeyFunction'
  ExpireAccessKeyFunctionArn:
    Description: "Expire access key lambda Function ARN"
    Value: !GetAtt ExpireAccessKeyFunction.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ExpireAccessKeyFunctionArn'
  ExpireAccessKeyFunctionApi:
    Description: "API Gateway endpoint URL for Expire Access Key function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/check/"
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ExpireAccessKeyFunctionApi'
