# Originally from https://github.com/jchrisfarris/aws-account-automation
AWSTemplateFormatVersion: '2010-09-09'
Description: Generic SNS Notification Topics and Alarms

Parameters:
  InitialSubscriberEmail:
    Description: Add this initial email to the alerts
    Type: String
  EnableSubscriberSMS:
    Description: Enable SMS notification of critical alerts
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  InitialSubscriberSMS:
    Description: Add this initial Cell for SMS notification of critical alerts
    Type: String
    Default: 1-404-867-5309-CHANGETHIS
  BillingThreshold:
    Description: Sets the billing alert to go off above this figure
    Type: Number
  DeployLambda:
    Description: Whether or not to deploy the slack lambda
    Type: String
    AllowedValues:
      - true
      - false
  SlackWebhookURL:
    Description: WebHook URL from Slack. Keep this secret
    Type: String
    Default: https://hooks.slack.com/services/slack-webhook-id
    NoEcho: true
  SlackChannel:
    Description: Slack Channel to send the spam to
    Type: String
    Default: '#aws_notices'
  SlackIconEmoji:
    Description: Slack Emoji to use
    Type: String
    Default: ':cloud:'
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Platform'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Infrastructure'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
    Default: 'it@sagebase.org'

Conditions:
  cDeployLambda:
    !Equals [ !Ref DeployLambda, true]
  cDeploySMSAlerts:
    !Equals [ !Ref EnableSubscriberSMS, true]

Resources:
  SNSAlertsNightmare:
    Type: AWS::SNS::Topic
    Condition: cDeploySMSAlerts
    Properties:
      Subscription:
      - Endpoint: !Ref 'InitialSubscriberSMS'
        Protocol: sms
  SNSAlertsCritical:
    Type: AWS::SNS::Topic
    Condition: cDeployLambda
    Properties:
      Subscription:
      - Endpoint: !Ref 'InitialSubscriberEmail'
        Protocol: email
      - Endpoint: !GetAtt [SlackNotificationLambda, Arn]
        Protocol: lambda
  SNSAlertsError:
    Type: AWS::SNS::Topic
    Condition: cDeployLambda
    Properties:
      Subscription:
      - Endpoint: !Ref 'InitialSubscriberEmail'
        Protocol: email
      - Endpoint: !GetAtt [SlackNotificationLambda, Arn]
        Protocol: lambda
  SNSAlertsInfo:
    Type: AWS::SNS::Topic
    Condition: cDeployLambda
    Properties:
      Subscription:
      - Endpoint: !Ref 'InitialSubscriberEmail'
        Protocol: email
      - Endpoint: !GetAtt [SlackNotificationLambda, Arn]
        Protocol: lambda

  SNSAlertPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: cDeployLambda
    Properties:
      PolicyDocument:
        Id: AlertTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: My-statement-id
          Effect: Allow
          Principal:
            AWS: "*"
            # AWS: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
          Action: sns:Publish
          Resource: '*'
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
      Topics: [!Ref 'SNSAlertsCritical', !Ref 'SNSAlertsError', !Ref 'SNSAlertsInfo']

  SpendingAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: cDeployLambda
    Properties:
      AlarmDescription: !Join ['', [Alarm if AWS spending is over $, !Ref 'BillingThreshold']]
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
      - Name: Currency
        Value: USD
      Statistic: Maximum
      Period: 21600
      EvaluationPeriods: 1
      Threshold: !Ref 'BillingThreshold'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: [!Ref 'SNSAlertsError']

  SlackNotificationLambdaRole:
    Type: AWS::IAM::Role
    Condition: cDeployLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: CloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['cloudwatch:*']
            Effect: Allow
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['logs:*']
            Effect: Allow

  SlackNotificationLambda:
    Type: AWS::Lambda::Function
    Condition: cDeployLambda
    Properties:
      Description: Send SNS Messages to Slack
      Runtime: python2.7
      Handler: index.lambda_handler
      Timeout: 80
      Code:
        ZipFile: |
          # Lambda to send SNS Messages to Slack
          from __future__ import print_function

          import boto3
          import json
          import logging
          import os

          from base64 import b64decode
          from urllib2 import Request, urlopen, URLError, HTTPError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("Received event: " + json.dumps(event, sort_keys=True))
              message = event['Records'][0]['Sns']['Message']
              subject = event['Records'][0]['Sns']['Subject']
              timestamp = event['Records'][0]['Sns']['Timestamp']
              topicARN = event['Records'][0]['Sns']['TopicArn'].split(':')[-1]

              slack_message = {
                  'channel': os.environ['SLACK_CHANNEL'],
                  'text': "%s: %s - %s" % (timestamp, subject, message),
                  'username': topicARN,
                  'icon_emoji': os.environ['ICON_EMOJI']
              }

              req = Request(os.environ['HOOK_URL'], json.dumps(slack_message))
              try:
                  response = urlopen(req)
                  response.read()
                  logger.info("Message posted to %s", slack_message['channel'])
              except HTTPError as e:
                  logger.error("Request failed: %d %s", e.code, e.reason)
              except URLError as e:
                  logger.error("Server connection failed: %s", e.reason)

      Role: !GetAtt [SlackNotificationLambdaRole, Arn]
      Environment:
        Variables:
          HOOK_URL: !Ref SlackWebhookURL
          SLACK_CHANNEL: !Ref SlackChannel
          ICON_EMOJI: !Ref SlackIconEmoji
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  SlackNotificationLambdaInvocationRole:
    Type: AWS::IAM::Role
    Condition: cDeployLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [events.amazonaws.com, sns.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ExecuteSlackLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['lambda:InvokeFunction']
            Effect: Allow
            Resource:
            - !GetAtt [SlackNotificationLambda, Arn]
  SlackNotificationLambdaPermissionSNSAlertsCritical:
    Type: AWS::Lambda::Permission
    Condition: cDeployLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsCritical'
      Action: lambda:invokeFunction
  SlackNotificationLambdaPermissionSNSAlertsInfo:
    Type: AWS::Lambda::Permission
    Condition: cDeployLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsInfo'
      Action: lambda:invokeFunction
  SlackNotificationLambdaPermissionSNSAlertsError:
    Type: AWS::Lambda::Permission
    Condition: cDeployLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsError'
      Action: lambda:invokeFunction


Outputs:
  SNSAlertsNightmare:
    Condition: cDeploySMSAlerts
    Value: !Ref 'SNSAlertsNightmare'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SNSAlertsNightmare'
  SNSAlertsCriticalArn:
    Value: !Ref 'SNSAlertsCritical'
    Condition: cDeployLambda
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SNSAlertsCriticalArn'
  SNSAlertsErrorArn:
    Condition: cDeployLambda
    Value: !Ref 'SNSAlertsError'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SNSAlertsErrorArn'
  SNSAlertsInfoArn:
    Condition: cDeployLambda
    Value: !Ref 'SNSAlertsInfo'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SNSAlertsInfoArn'
