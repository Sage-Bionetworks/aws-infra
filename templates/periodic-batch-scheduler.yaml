AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Lambda to schedule periodic execution of a batch job
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  JobDefinitionArn:
    Description: Job definition ARN (i.e. arn:aws:batch:us-east-1:111111111111:job-definition/my-job:1)
    Type: String
  JobQueueArn:
    Description: Job queue ARN (i.e. arn:aws:batch:us-east-1:111111111111:job-queue/my-job-queue)
    Type: String
  ScheduleExpression:  #https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Description: The schedule (cron) expression to trigger the batch job
    Type: String
    Default: "rate(1 day)"
  LambdaFailureAlarmAction:
    Description: The alarm failure action
    Type: String
    Default: "us-east-1-AccountAlertTopics-SNSAlertsErrorArn"
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PublishToCloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: BatchJobAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:DescribeJobs
                  - batch:ListJobs
                  - batch:SubmitJob
                Resource: "*"
  SubmitBatchJobLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 5
      Handler: index.lambda_handler
      Environment:
        Variables:
          JOB_DEFINITION_ARN: !Ref JobDefinitionArn
          JOB_QUEUE_ARN: !Ref JobQueueArn
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import logging
          import os
          import boto3
          from botocore.exceptions import ClientError

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
              # Log the received event
              logger.debug("Received event: " + json.dumps(event, indent=2))

              # Get parameters for the SubmitJob call
              # http://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html
              # These should be passed in via Lambda Environment Variables
              try:
                  jobDefinitionArn = os.environ['JOB_DEFINITION_ARN']
                  jobQueueArn = os.environ['JOB_QUEUE_ARN']
                  jobName = jobDefinitionArn.split(":")[-2].split("/")[-1]
                  jobRevision = jobDefinitionArn.split(":")[-1]
                  jobDefinition = jobName + ":" + jobRevision
                  jobQueue = jobQueueArn.split(":")[-1].split("/")[-1]
              except (KeyError, ValueError, Exception) as e:
                  logger.error(e.response['Error']['Message'])

              # containerOverrides and parameters are optional
              if event.get('containerOverrides'):
                  containerOverrides = event['containerOverrides']
              else:
                  containerOverrides = {}
              if event.get('parameters'):
                  parameters = event['parameters']
              else:
                  parameters = {}

              try:
                  batch = boto3.client('batch')
                  # Submit a Batch Job
                  response = batch.submit_job(jobQueue=jobQueue, jobName=jobName, jobDefinition=jobDefinition,
                                              containerOverrides=containerOverrides, parameters=parameters)
                  # Return the jobId
                  jobId = response['jobId']

                  # Log response from AWS Batch
                  logger.debug("Job: " + jobId + " Response: " + json.dumps(response, indent=2))
                  return {
                      'jobId': jobId
                  }
              except ClientError as e:
                  logger.error(e.response['Error']['Message'])
      Tags:
        - Key: "Name"
          Value: !Ref 'AWS::StackName'
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  LambdaPeriodicEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      Targets:
        - Arn: !GetAtt SubmitBatchJobLambda.Arn
          Id: !Ref SubmitBatchJobLambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SubmitBatchJobLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaPeriodicEvent.Arn
  LambdaFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - 'Fn::ImportValue': !Sub '${LambdaFailureAlarmAction}'
      MetricName: !Sub "${SubmitBatchJobLambda}-FailureAlarm"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SubmitBatchJobLambda
      EvaluationPeriods: 1
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
Outputs:
  LambdaFailureAlarm:
    Value: !Ref 'LambdaFailureAlarm'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaFailureAlarm'
  SubmitBatchJobLambda:
    Value: !Ref 'SubmitBatchJobLambda'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SubmitBatchJobLambda'
  LambdaExecutionRole:
    Value: !Ref 'LambdaExecutionRole'
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaExecutionRole'
