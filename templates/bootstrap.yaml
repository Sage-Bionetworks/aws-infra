#This template is used to bootstrap resources for an AWS account.
#The resources in this template only need to be created once.
Description: Bootstrap resources for new AWS account
AWSTemplateFormatVersion: 2010-09-09
Resources:
  # !! IMPORTANT !! - AWS API will refuse to remove users that have attached resources.
  # Therefore you must do the following before deleting them from this file:
  # 1. Detach or remove the following user resources: login profile, attached
  #    MFA device, access-keys, ssh-keys, and policies.
  # 2. Detach the user from all groups.
  AWSIAMTravisUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref AWSIAMTravisUser
  AWSIAMTravisUser:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMCiGroup
  AWSIAMCiGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  # Cloudformation bucket for CF templates
  AWSS3CloudformationBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
  AWSIAMS3CloudformationBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3CloudformationBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowPublicRead"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWSS3CloudformationBucket}/*"
  # CF Service roles
  AWSIAMCfServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt AWSIAMTravisUser.Arn
            Action:
              - "sts:AssumeRole"
      Path: "/"
  AWSIAMCfServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CfService"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        -
          !Ref AWSIAMCfServiceRole
  AWSIAMCfServiceInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref AWSIAMCfServiceRole
  # KMS Keys
  AWSKmsInfraKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "InfraKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !GetAtt AWSIAMTravisUser.Arn
                - !GetAtt AWSIAMCfServiceRole.Arn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt AWSIAMTravisUser.Arn
                - !GetAtt AWSIAMCfServiceRole.Arn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
  AWSKmsInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/InfraKey'
      TargetKeyId: !Ref AWSKmsInfraKey

Outputs:
  # Deprecated, do not reference this!, use AWSIAMTravisUser instead
  AWSIAMTravisUserShortName:
    Value: !Ref AWSIAMTravisUser
    Export:
      Name: !Sub '${AWS::StackName}-TravisUser'
  AWSIAMTravisUser:
    Value: !Ref AWSIAMTravisUser
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TravisUser'
  AWSIAMTravisUserArn:
    Value: !GetAtt AWSIAMTravisUser.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TravisUserArn'
  AWSIAMTravisUserAccessKey:
    Value: !Ref AWSIAMTravisUserAccessKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TravisUserAccessKey'
  AWSIAMTravisUserSecretAccessKey:
    Value: !GetAtt AWSIAMTravisUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TravisUserSecretAccessKey'
  AWSS3CloudformationBucket:
    Value: !Ref AWSS3CloudformationBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudformationBucket'
  AWSIAMCfServiceRoleArn:
    Value: !GetAtt AWSIAMCfServiceRole.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CfServiceRoleArn'
  AWSKmsInfraKey:
    Value: !Ref AWSKmsInfraKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKey'
  AWSKmsInfraKeyAlias:
    Value: !Ref AWSKmsInfraKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKeyAlias'
