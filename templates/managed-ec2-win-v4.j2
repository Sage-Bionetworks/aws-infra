AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Provision EC2 instance, connect to Jumpcloud, and associate with a jumpcloud systems group.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ""
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
  JcConnectKey:
    Description: Connection key used to let JC agent connect to a Jumpcloud account.
    Type: String
    NoEcho: true
  JcServiceApiKey:
    Description: The Jumpcloud service user API key
    Type: String
    NoEcho: true
  JcSystemsGroupId:
    Description: Put EC2 into this Jumpcloud systems group
    Type: String
    NoEcho: true
  VpcSubnet:
    Description: Name of an existing VPC subnet to run the instance in.
    Type: String
    Default: PrivateSubnet
    ConstraintDescription: >-
      Allowed values (PrivateSubnet, PrivateSubnet1, PrivateSubnet2, PublicSubnet, PublicSubnet1, PublicSubnet2)
    AllowedValues:
      - PrivateSubnet
      - PrivateSubnet1
      - PrivateSubnet2
      - PublicSubnet
      - PublicSubnet1
      - PublicSubnet2
  VpcName:
    Description: 'Name of an existing VPC to run the instance in'
    Type: String
    Default: sandcastlevpc
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  EncryptVolume:
    Type: String
    Description: true to encrypt root volume, false (default) for no encryption
    AllowedValues:
      - true
      - false
    Default: true
    ConstraintDescription: 'Must be true or false'
  ParkMyCloudManaged:
    Description: Allow ParkMyCloud service to start/stop resources
    Type: String
    Default: 'yes'
  AMIId:
    Description: ID of the AMI to deploy
    Type: String
  VolumeSize:
    Description: The EC2 volume size (in GB)
    Type: Number
    Default: 30
    MinValue: 10
    MaxValue: 2000
  BackupEc2:
    Type: String
    Description: true to enable daily EC2 backup, false (default) for no backup
    AllowedValues:
      - true
      - false
    Default: false
  SnapshotCount:
    Description: The number of snapshots to keep, only used if BackupEc2=true
    Type: Number
    MinValue: 1
    MaxValue: 180
    Default: 7
    ConstraintDescription: Valid values are 1-180
Conditions:
  PublicEc2Resources: !Or [!Equals [ !Ref VpcSubnet, PublicSubnet ], !Equals [ !Ref VpcSubnet, PublicSubnet1 ], !Equals [ !Ref VpcSubnet, PublicSubnet2 ] ]
  HasKeyName: !Not [!Equals ["", !Ref KeyName]]
  EnableEc2Backup: !Equals [!Ref BackupEc2, true]
Resources:
  {% if sceptre_user_data.OpenPorts is defined %}
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue
        'Fn::Sub': '${AWS::Region}-${VpcName}-VPCId'
      SecurityGroupIngress:
      {% for port in sceptre_user_data.OpenPorts %}
        - CidrIp: "0.0.0.0/0"
          FromPort: {{ port }}
          ToPort: {{ port }}
          IpProtocol: tcp
      {% endfor %}
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  {% endif %}
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupCfn:
            - cfn_hup_service
          SetupApps:
            - install_apps
          SetupJumpcloud:
            - install_jc
            - config_jc
          SetupVolume:
            - tag_volume
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init.
        cfn_hup_service:
          files:
             "c:\\cfn\\cfn-hup.conf":
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
             "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init
                 action=cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2Instance --region ${AWS::Region} --configsets SetupCfn,SetupApps,SetupJumpcloud,SetupVolume
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
        install_apps:
          files:
            'c:\\scripts\\install-chocolatey.ps1':
              source: "https://chocolatey.org/install.ps1"
              mode: "0664"
          commands:
            01_install_nuget:
              command: 'Powershell.exe Install-PackageProvider -Name NuGet -Force'
            02_install_chocolatey:
              command: !Join
                - ''
                - - 'Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force;'
                  - 'Powershell.exe C:\scripts\install-chocolatey.ps1 > C:\scripts\install-chocolatey.log'
            03_install_jq:
              command: 'Powershell.exe C:\ProgramData\chocolatey\bin\choco install jq --yes'
            04_install_awscli:
              command: 'Powershell.exe C:\ProgramData\chocolatey\bin\choco install awscli --yes'
            05_install_googlechrome:
              command: 'Powershell.exe C:\ProgramData\chocolatey\bin\choco install googlechrome  --yes --ignore-checksums'
        install_jc:
          files:
            'c:\scripts\install-ms-vc.ps1':
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/infra-utils/v1.0.2/aws/install-ms-vc.ps1"
              mode: "0664"
            'c:\\scripts\\install-jc-agent.ps1':
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/infra-utils/v1.0.2/aws/install-jc-agent.ps1"
              mode: "0664"
          commands:
            01_install_ms_vc:
              command: !Join
                - ''
                - - 'Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force;'
                  - 'Powershell.exe C:\scripts\install-ms-vc.ps1 > C:\scripts\install-ms-vc.log'
            02_install_jc_agent:
              command: !Join
                - ''
                - - 'Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force;'
                  - 'Powershell.exe C:\scripts\install-jc-agent.ps1 '
                  - ' -JcConnectKey '
                  - !Ref JcConnectKey
                  - ' > C:\scripts\install-jc-agent.log'
        config_jc:
          files:
            'c:\\scripts\\associate-jc-system.ps1':
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/infra-utils/v1.0.2/aws/associate-jc-system.ps1"
              mode: "0664"
          commands:
            01_associate_jc_systems:
              command: !Join
                - ''
                - - 'Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force;'
                  - 'Powershell.exe C:\scripts\associate-jc-system.ps1 '
                  - ' -JcServiceApiKey '
                  - !Ref JcServiceApiKey
                  - ' -JcSystemsGroupId '
                  - !Ref JcSystemsGroupId
                  - ' -OwnerEmail '
                  - !Ref OwnerEmail
                  - ' > C:\scripts\associate-jc-system.log'
        tag_volume:
          files:
             "c:\\scripts\\tag-instance-volume.ps1":
              source: "https://raw.githubusercontent.com/Sage-Bionetworks/infra-utils/v1.0.2/aws/tag-instance-volume.ps1"
              mode: "0664"
          commands:
            01_tag_instance_volume:
              command: !Join
                - ''
                - - 'Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force;'
                  - 'Powershell.exe C:\scripts\tag-instance-volume.ps1 '
                  - ' -AwsRegion '
                  - !Ref AWS::Region
                  - ' -StackName '
                  - !Ref AWS::StackName
                  - ' -Department '
                  - !Ref Department
                  - ' -Project '
                  - !Ref Project
                  - ' -OwnerEmail '
                  - !Ref OwnerEmail
                  - ' > C:\scripts\tag-instance-volume.log'
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref VolumeSize
            Encrypted: !Ref EncryptVolume
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !ImportValue
              'Fn::Sub': '${AWS::Region}-${VpcName}-VpnSecurityGroup'
          {% if sceptre_user_data.OpenPorts is defined %}
            - !GetAtt InstanceSecurityGroup.GroupId
          {% endif %}
          SubnetId: !ImportValue
            'Fn::Sub': '${AWS::Region}-${VpcName}-${VpcSubnet}'
      IamInstanceProfile: !ImportValue
        'Fn::Sub': '${AWS::Region}-essentials-TagRootVolumeProfile'
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2Instance --region ${AWS::Region} --configsets SetupCfn,SetupApps,SetupJumpcloud,SetupVolume
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource Ec2Instance --region ${AWS::Region}
          </script>
      Tags:
        - Key: "parkmycloud"
          Value: !Ref ParkMyCloudManaged
        - Key: "Name"
          Value: !Ref 'AWS::StackName'
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT30M"
  Ec2Backup:
    Type: 'AWS::CloudFormation::Stack'
    Condition: EnableEc2Backup
    Properties:
      # template uploaded from Sage-Bionetworks/aws-infra repo
      TemplateURL: 'https://s3.amazonaws.com/bootstrap-awss3cloudformationbucket-19qromfd235z9/aws-infra/master/ec2-backup.yaml'
      Parameters:
        StackName: !Ref AWS::StackName
        SnapshotCount: !Ref SnapshotCount
      Tags:
        - Key: "parkmycloud"
          Value: !Ref ParkMyCloudManaged
        - Key: "Name"
          Value: !Ref 'AWS::StackName'
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
Outputs:
  Ec2InstanceId:
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstanceId'
  Ec2InstancePrivateIp:
    Value: !GetAtt Ec2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePrivateIp'
  Ec2InstancePublicIp:
    Condition: PublicEc2Resources
    Value: !GetAtt Ec2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePublicIp'
  OwnerEmail:
    Value: !Ref OwnerEmail
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-OwnerEmail'
