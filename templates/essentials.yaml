Description: Essential resources common to all AWS accounts
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  OperatorEmail:
    Type: String
  CentralCloudtrailBucket:
    Type: String
    Description: The central S3 bucket where AWS CloudTrail send logs to.
    Default: essentials-awss3cloudtrailbucket-1jz6pf8dzid7r
  VpcPeeringRequesterAwsAccountId:
    Type: String
    NoEcho: true
    Description: The AWS account running the Sophos-VPN
    AllowedPattern: '[0-9]*'
    ConstraintDescription: Must be account number without dashes
  LambdaBucketVersioning:
    Type: String
    Description: Enabled to enable bucket versionsing, default is Suspended
    AllowedValues:
      - Enabled
      - Suspended
    Default: Suspended
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Platform'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Infrastructure'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
    Default: 'it@sagebase.org'
Resources:
  # resources for cloudtrail
  AWSLogsCloudtrailLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${AWS::StackName}.log'
      RetentionInDays: 90
  AWSS3CloudtrailBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  AWSIAMS3CloudtrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3CloudtrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}
          -
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  AWSSNSCloudtrailTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSNSCloudtrailTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref AWSSNSCloudtrailTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "CloudtrailTopicPolicy"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  AWSIAMCloudtrailLogManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action:
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
  AWSIAMCloudtrailLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudtrailLogManagedPolicy
  AWSCloudtrailTrail:
    DependsOn:
      - AWSIAMS3CloudtrailBucketPolicy
      - AWSSNSCloudtrailTopicPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt AWSIAMCloudtrailLogRole.Arn
      # send all logs to cloudtrail bucket in AWS logcentral account
      S3BucketName: !Ref CentralCloudtrailBucket
      SnsTopicName: !GetAtt AWSSNSCloudtrailTopic.TopicName
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
  # AWS Config service, https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/Config/Config.yaml
  AWSConfigConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt [AWSIAMConfigRole, Arn]
  AWSConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      # Send log and data to AWS logcentral account
      S3BucketName: "essentials-awss3configbucket-9n8wjykhvr5z"
  AWSS3ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  # Bucket for lambda artifacts
  AWSS3LambdaArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      VersioningConfiguration:
        Status: !Ref LambdaBucketVersioning
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  AWSIAMS3LambdaArtifactsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3LambdaArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowPublicRead"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWSS3LambdaArtifactsBucket}/*"
  AWSSnsConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSnsConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ConfigTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: SNS:Publish
          Resource: '*'
      Topics: [!Ref 'AWSSnsConfigTopic']
  AWSIAMConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [config.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'
  # https://docs.aws.amazon.com/config/latest/developerguide/cloudtrail-enabled.html
  AWSConfigCloudtrailEnabledConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn: AWSConfigConfigurationRecorder
    Properties:
      Description: Checks whether AWS CloudTrail is enabled.
      InputParameters:
        # logs and data are in AWS logcentral account
        s3BucketName: !Ref CentralCloudtrailBucket
        snsTopicArn: !Ref AWSSNSCloudtrailTopic
        cloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
      MaximumExecutionFrequency: TwentyFour_Hours
  # Create a role to authorize the VPC Peering request from a specific account,
  # this is used to create the VPC Peer between different accounts in  CloudFormation
  # https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/VPCPeering
  VPCPeeringAuthorizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref VpcPeeringRequesterAwsAccountId
                  - ':root'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCAuthorizer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AcceptVpcPeeringConnection'
                Resource:
                  - '*'
  # KMS Keys
  AWSKmsInfraKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "InfraKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue us-east-1-bootstrap-TravisUserArn
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !ImportValue us-east-1-bootstrap-TravisUserArn
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
                - !ImportValue us-east-1-bootstrap-SsmParamLambdaExecutionRoleArn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  AWSKmsInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/InfraKey'
      TargetKeyId: !Ref AWSKmsInfraKey
  # Allow instances to apply tags to its root volume
  TagRootVolumePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: TagInstanceVolume
            Effect: Allow
            Action:
              - "ec2:Describe*"
              - "ec2:CreateTags"
            Resource: "*"
  TagRootVolumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref TagRootVolumePolicy
  TagRootVolumeProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref TagRootVolumeRole
  # Role for Data Lifecycle Manager (DLM)
  # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html
  AWSDataLifecycleManagerDefaultRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "dlm.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "DefaultDLM"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:CreateSnapshot"
                  - "ec2:DeleteSnapshot"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeSnapshots"
                Resource:
                  - '*'
              - Effect: "Allow"
                Action:
                  - "ec2:CreateTags"
                Resource:
                  - 'arn:aws:ec2:*::snapshot/*'
Outputs:
  AWSS3CloudtrailBucket:
    Value: !Ref AWSS3CloudtrailBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudtrailBucket'
  AWSS3CloudtrailBucketArn:
    Value: !GetAtt AWSS3CloudtrailBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudtrailBucketArn'
  AWSS3ConfigBucket:
    Value: !Ref AWSS3ConfigBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AwsConfigBucket'
  AWSS3ConfigBucketArn:
    Value: !GetAtt AWSS3ConfigBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AwsConfigBucketArn'
  AWSS3LambdaArtifactsBucket:
    Value: !Ref AWSS3LambdaArtifactsBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaArtifactsBucket'
  AWSS3LambdaArtifactsBucketArn:
    Value: !GetAtt AWSS3LambdaArtifactsBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaArtifactsBucketArn'
  VPCPeeringAuthorizerRole:
    Description: Cross Account Role Name
    Value: !Ref VPCPeeringAuthorizerRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-VPCPeeringAuthorizerRole'
  AWSKmsInfraKey:
    Value: !Ref AWSKmsInfraKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKey'
  AWSKmsInfraKeyAlias:
    Value: !Ref AWSKmsInfraKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKeyAlias'
  TagRootVolumeProfile:
    Description: Profile to allow instances to tag its root volume
    Value: !Ref TagRootVolumeProfile
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumeProfile'
  TagRootVolumeRole:
    Description: Role to allow instances to tag its root volume
    Value: !Ref TagRootVolumeRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumeRole'
  TagRootVolumePolicy:
    Description: Policy which allows volume tagging
    Value: !Ref TagRootVolumePolicy
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumePolicy'
  AWSDataLifecycleManagerDefaultRoleArn:
    Description: Default Data Lifecycle Manager role arn
    Value: !GetAtt AWSDataLifecycleManagerDefaultRole.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AWSDataLifecycleManagerDefaultRoleArn'
