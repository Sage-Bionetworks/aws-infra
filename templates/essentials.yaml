Description: Essential resources common to all AWS accounts
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcPeeringRequesterAwsAccountId:
    Type: String
    NoEcho: true
    Description: The AWS account running the Sophos-VPN
    AllowedPattern: '[0-9]*'
    ConstraintDescription: Must be account number without dashes
  LambdaBucketVersioning:
    Type: String
    Description: Enabled to enable bucket versionsing, default is Suspended
    AllowedValues:
      - Enabled
      - Suspended
    Default: Suspended
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Platform'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'Infrastructure'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
    Default: 'it@sagebase.org'
Resources:
  # ofn manages cloudtrail now. we keep legacy bucket to retain the old data
  # https://github.com/Sage-Bionetworks-IT/organizations-infra/tree/master/org-formation/060-cloudtrail
  AWSS3CloudtrailBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  # ofn manages aws config now. we keep legacy bucket to retain the old data
  # https://github.com/Sage-Bionetworks-IT/organizations-infra/tree/master/org-formation/80-aws-config-inventory
  AWSS3ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  # Bucket for lambda artifacts
  AWSS3LambdaArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      VersioningConfiguration:
        Status: !Ref LambdaBucketVersioning
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  AWSIAMS3LambdaArtifactsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3LambdaArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowPublicRead"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWSS3LambdaArtifactsBucket}/*"
  # Create a role to authorize the VPC Peering request from a specific account,
  # this is used to create the VPC Peer between different accounts in  CloudFormation
  # https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/VPCPeering
  VPCPeeringAuthorizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref VpcPeeringRequesterAwsAccountId
                  - ':root'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCAuthorizer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AcceptVpcPeeringConnection'
                Resource:
                  - '*'
  # KMS Keys
  AWSKmsInfraKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "InfraKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                - !ImportValue us-east-1-bootstrap-TravisUserArn
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                - !ImportValue us-east-1-bootstrap-TravisUserArn
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
                - !ImportValue us-east-1-bootstrap-SsmParamLambdaExecutionRoleArn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  AWSKmsInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/InfraKey'
      TargetKeyId: !Ref AWSKmsInfraKey

  # Allow instances to apply tags to its root volume and attach SSM
  ManagedInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref TagRootVolumePolicy
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
  ManagedInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref ManagedInstanceRole
  # Allow instances to apply tags to anything and deny write to TagKeys like "Protected/*" except by self
  TagRootVolumePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: TagInstanceVolume
            Effect: Allow
            Action:
              - "ec2:Describe*"
              - "ec2:CreateTags"
            Resource: "*"
          - Sid: DenyWriteProtectedPath
            Effect: Deny
            Action:
              - "ec2:CreateTags"
            Resource: "*"
            Condition:
              StringNotEquals:
                "aws:ARN": "${ec2:SourceInstanceARN}"
              ForAnyValue:StringLike:
                "aws:TagKeys":
                  - "Protected/*" #this can be a list of paths to protect
  TagRootVolumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref TagRootVolumePolicy
  TagRootVolumeProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref TagRootVolumeRole
  # Role for Data Lifecycle Manager (DLM)
  # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html
  AWSDataLifecycleManagerDefaultRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "dlm.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "DefaultDLM"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:CreateSnapshot"
                  - "ec2:DeleteSnapshot"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeSnapshots"
                Resource:
                  - '*'
              - Effect: "Allow"
                Action:
                  - "ec2:CreateTags"
                Resource:
                  - 'arn:aws:ec2:*::snapshot/*'
Outputs:
  AWSS3CloudtrailBucket:
    Value: !Ref AWSS3CloudtrailBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudtrailBucket'
  AWSS3CloudtrailBucketArn:
    Value: !GetAtt AWSS3CloudtrailBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudtrailBucketArn'
  AWSS3ConfigBucket:
    Value: !Ref AWSS3ConfigBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AwsConfigBucket'
  AWSS3ConfigBucketArn:
    Value: !GetAtt AWSS3ConfigBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AwsConfigBucketArn'
  AWSS3LambdaArtifactsBucket:
    Value: !Ref AWSS3LambdaArtifactsBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaArtifactsBucket'
  AWSS3LambdaArtifactsBucketArn:
    Value: !GetAtt AWSS3LambdaArtifactsBucket.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaArtifactsBucketArn'
  VPCPeeringAuthorizerRole:
    Description: Cross Account Role Name
    Value: !Ref VPCPeeringAuthorizerRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-VPCPeeringAuthorizerRole'
  AWSKmsInfraKey:
    Value: !Ref AWSKmsInfraKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKey'
  AWSKmsInfraKeyAlias:
    Value: !Ref AWSKmsInfraKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfraKeyAlias'
  ManagedInstanceProfile:
    Description: Profile to allow instances to tag its root volume and allow SSM actions
    Value: !Ref ManagedInstanceProfile
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ManagedInstanceProfile'
  ManagedInstanceProfileArn:
    Description: Profile to allow instances to tag its root volume and allow SSM actions
    Value: !GetAtt ManagedInstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ManagedInstanceProfileArn'
  ManagedInstanceRole:
    Description: Role to allow instances to tag its root volume and allow SSM actions
    Value: !Ref ManagedInstanceRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ManagedInstanceRole'
  ManagedInstanceRoleArn:
    Description: Role to allow instances to tag its root volume and allow SSM actions
    Value: !GetAtt ManagedInstanceRole.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ManagedInstanceRoleArn'
  TagRootVolumeProfile:
    Description: Profile to allow instances to tag its root volume
    Value: !Ref TagRootVolumeProfile
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumeProfile'
  TagRootVolumeRole:
    Description: Role to allow instances to tag its root volume
    Value: !Ref TagRootVolumeRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumeRole'
  TagRootVolumePolicy:
    Description: Policy which allows volume tagging
    Value: !Ref TagRootVolumePolicy
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TagRootVolumePolicy'
  AWSDataLifecycleManagerDefaultRoleArn:
    Description: Default Data Lifecycle Manager role arn
    Value: !GetAtt AWSDataLifecycleManagerDefaultRole.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AWSDataLifecycleManagerDefaultRoleArn'
