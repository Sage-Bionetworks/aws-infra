# From https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html#scenario-s3-bucket-website-customdomain
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Provision a S3 static website (HTTPS) with cloudfront
Parameters:
  DomainName:
    Description: Domain name for your website (example.org)
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  SubDomainName:
    Description: The sub domain name e.g. ('my' in my.example.org)
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  AcmCertificateArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    AllowedPattern: "arn:aws:acm:.*"
    ConstraintDescription: must be a valid certificate ARN.
Conditions:
  IsProd: !Equals [!Ref SubDomainName, 'prod']
Resources:
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${SubDomainName}.${DomainName}'
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: CFOAIReadForGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
      Bucket: !Ref WebsiteBucket
  Cloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - DomainName: !Sub '${WebsiteBucket}.s3.amazonaws.com'
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CloudFrontOAI ] ]
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !Sub '${SubDomainName}.${DomainName}'
          - !If [IsProd, !Ref DomainName, !Ref AWS::NoValue]
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          DefaultTTL: 3600
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
Outputs:
  CloudfrontId:
    Value: !Ref Cloudfront
    Description: ID of the Cloudfront distribution
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudfrontId'
  CloudfrontEndpoint:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt Cloudfront.DomainName
    Description: URL for cloudfront
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudfrontEndpoint'
  BucketWebsiteUrl:
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Description: URL for website hosted in S3 bucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BucketWebsiteUrl'
  WebsiteBucket:
    Value: !Ref WebsiteBucket
    Description: The bucket containing the website content
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-WebsiteBucket'
