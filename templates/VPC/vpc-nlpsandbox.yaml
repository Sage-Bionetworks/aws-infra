AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a VPC with public and private subnets and a managed NAT gateway.
Parameters:
  VpcName:
    Description: The VPC name (i.e. Synapse-Prod)
    Type: String
  VpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 10.255.40)
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
  PublicSubnetZones:
    Description: Availability zones for public subnets
    Type: List<AWS::EC2::AvailabilityZone::Name>
    ConstraintDescription: List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c
    Default: "us-east-1a, us-east-1b, us-east-1c"
  PrivateSubnetZones:
    Description: Availability zones for private subnets
    Type: List<AWS::EC2::AvailabilityZone::Name>
    ConstraintDescription: List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c
    Default: "us-east-1a, us-east-1b, us-east-1c"
  VpnCidr:
    Description: CIDR of the (sophos-utm) VPN
    Type: String
    Default: "10.1.0.0/16"
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "0/24" #10.255.X.0/24 = 10.255.X.0-10.255.X.255
    Public:
      CIDR: "0/27" #10.255.X.1-30
    Private:
      CIDR: "32/27" #10.255.X.33-62
    Public1:
      CIDR: "64/27" #10.255.X.65-94
    Private1:
      CIDR: "96/27" #10.255.X.97-126
    Public2:
      CIDR: "128/27" #10.255.X.129-158
    Private2:
      CIDR: "160/27" #10.255.X.161-190
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        - Key: "Name"
          Value: !Ref VpcName
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public, CIDR]
      AvailabilityZone: !Select
        - 0
        - !Ref PublicSubnetZones
      Tags:
        - Key: "Name"
          Value: "Public"
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Private, CIDR]
      AvailabilityZone: !Select
        - 0
        - !Ref PrivateSubnetZones
      Tags:
        - Key: "Name"
          Value: "Private"
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public1, CIDR]
      AvailabilityZone: !Select
        - 1
        - !Ref PublicSubnetZones
      Tags:
        - Key: "Name"
          Value: "Public1"
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public2, CIDR]
      AvailabilityZone: !Select
        - 2
        - !Ref PublicSubnetZones
      Tags:
        - Key: "Name"
          Value: "Public2"
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Private1, CIDR]
      AvailabilityZone: !Select
        - 1
        - !Ref PrivateSubnetZones
      Tags:
        - Key: "Name"
          Value: "Private1"
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Private2, CIDR]
      AvailabilityZone: !Select
        - 2
        - !Ref PrivateSubnetZones
      Tags:
        - Key: "Name"
          Value: "Private2"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "Public, Public1, Public2"
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public"
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet2"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet2"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet"
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private"
  PrivateRouteToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway"
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet"
      RouteTableId:
        Ref: "PrivateRouteTable"
  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId:
        Ref: "PrivateRouteTable"
  PrivateSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet2"
      RouteTableId:
        Ref: "PrivateRouteTable"
  # Allow access to EC2 when connected to the Sage VPN
  VpnSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for VPN
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - CidrIp: !Ref VpnCidr
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
          Description: "Allow all VPN traffic"
      # CF does not support removing all rules, workaround is to add a pointless rule
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
  # Allow access to bastian hosts
  BastianSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for bastians
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: "Allow SSH connection"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
  QuarantineSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for quarantining hosts
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - CidrIp: !Ref VpnCidr
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: "Allow SSH connection from VPN route"
        - CidrIp: !Ref VpnCidr
          FromPort: 3389
          ToPort: 3389
          IpProtocol: tcp
          Description: "Allow RDP connection from VPN route"
      SecurityGroupEgress:
        - CidrIp: "127.0.0.1/32"
          IpProtocol: "-1"
Outputs:
  VPCId:
    Description: "VPCId of the newly created VPC"
    Value:
      Ref: "VPC"
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VPCId']]
  VpcCidr:
    Description: "VPC CIDR of the newly created VPC"
    Value: !GetAtt
      - VPC
      - CidrBlock
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcCidr']]
  PublicSubnet:
    Description: "SubnetId of the public subnet"
    Value: !Ref PublicSubnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet']]
  PublicSubnet1:
    Description: "SubnetId of the public subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet1']]
  PublicRouteTable:
    Description: "Route table Id for public subnets"
    Value: !Ref PublicRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicRouteTable']]
  PublicSubnet2:
    Description: "SubnetId of the public subnet 2"
    Value: !Ref PublicSubnet2
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet2']]
  PrivateSubnet:
    Description: "SubnetId of the private subnet"
    Value: !Ref PrivateSubnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateSubnet']]
  PrivateSubnet1:
    Description: "SubnetId of the private subnet 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateSubnet1']]
  PrivateSubnet2:
    Description: "SubnetId of the private subnet 2"
    Value: !Ref PrivateSubnet2
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateSubnet2']]
  PrivateRouteTable:
    Description: "Route table Id for private subnets"
    Value: !Ref PrivateRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateRouteTable']]
  VpcDefaultSecurityGroup:
    Description: "VPC DefaultSecurityGroup Id"
    Value: { "Fn::GetAtt":["VPC", "DefaultSecurityGroup"] }
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcDefaultSecurityGroup']]
  VpnSecurityGroup:
    Description: "VPN Security Group Id"
    Value: !Ref VpnSecurityGroup
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpnSecurityGroup']]
  BastianSecurityGroup:
    Description: "Bastian Security Group Id"
    Value: !Ref BastianSecurityGroup
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'BastianSecurityGroup']]
  QuarantineSecurityGroup:
    Description: "Quarantine Security Group Id"
    Value: !Ref QuarantineSecurityGroup
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'QuarantineSecurityGroup']]
  VpnCidr:
    Description: "CIDR of the VPN used for the VpnSecurityGroup SecurityIngress"
    Value: !Ref VpnCidr
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpnCidr']]
