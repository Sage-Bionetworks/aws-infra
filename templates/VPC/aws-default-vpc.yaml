# This template creates the AWS default VPC. The intention is to allow restoring
# the AWS default VPC in cases where it got accidentally deleted
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  A public VPC with 6 availability zones and 6 subnets
Parameters:
  VpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 10.40)
    Type: String
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "0.0/16"
    Public0:
      CIDR: "0.0/20"
    Public1:
      CIDR: "16.0/20"
    Public2:
      CIDR: "32.0/20"
    Public3:
      CIDR: "48.0/20"
    Public4:
      CIDR: "64.0/20"
    Public5:
      CIDR: "80.0/20"
  AZRegions:
    us-east-1:
      AZs: ["a", "b", "c", "d", "e", "f"]
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}'
  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public0, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet0'
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public1, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public2, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet2'
  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public3, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 3, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet3'
  PublicSubnet4:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public4, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 4, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet4'
  PublicSubnet5:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public5, CIDR]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 5, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-PublicSubnet5'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}'
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}'
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet2"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet3"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation4:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet4"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicSubnetRouteTableAssociation5:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet5"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet3"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation3:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet3"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation4:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet4"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation5:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet5"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
Outputs:
  VPCId:
    Description: "VPCId of the newly created VPC"
    Value:
      Ref: "VPC"
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VPCId']]
  VpcCidr:
    Description: "VPC CIDR of the newly created VPC"
    Value: !GetAtt
      - VPC
      - CidrBlock
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcCidr']]
  PublicSubnet0:
    Description: "SubnetId of the public subnet 0"
    Value: !Ref PublicSubnet0
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet0']]
  PublicSubnet1:
    Description: "SubnetId of the public subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet1']]
  PublicSubnet2:
    Description: "SubnetId of the public subnet 2"
    Value: !Ref PublicSubnet2
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet2']]
  PublicSubnet3:
    Description: "SubnetId of the public subnet 3"
    Value: !Ref PublicSubnet3
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet3']]
  PublicSubnet4:
    Description: "SubnetId of the public subnet 4"
    Value: !Ref PublicSubnet4
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet4']]
  PublicSubnet5:
    Description: "SubnetId of the public subnet 5"
    Value: !Ref PublicSubnet5
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet5']]
  PublicRouteTable:
    Description: "Route table Id for public subnets"
    Value: !Ref PublicRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicRouteTable']]
  VpcDefaultSecurityGroup:
    Description: "VPC DefaultSecurityGroup Id"
    Value: { "Fn::GetAtt" : ["VPC", "DefaultSecurityGroup"] }
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcDefaultSecurityGroup']]
