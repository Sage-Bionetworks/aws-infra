AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Automate IAM access key rotation and syncronize it with the password rotation schedule.

Parameters:
  LambdaBucket:
    Description: Bucket Holding Lambdas
    Type: String
  GracePeriod:
    Description: How many days to send the user a warning email before the lockout occurs
    Type: Number
    Default: 14
  DisableKeys:
    Description: Set to True if you want to disabled expired IAM access keys
    Type: String
    Default: "false"
    AllowedValues:
      - true
      - false
  SendReport:
    Description: Send expired credentials report to a notification topic
    Type: String
    Default: "false"
    AllowedValues:
      - true
      - false
  SendEmail:
    Description: Send expired credential notification emails to users
    Type: String
    Default: "false"
    AllowedValues:
      - true
      - false
  SenderEmail:
    Description: A SES verified sender email address
    Type: String
    Default: "My AWS Account <user@example.com>"

Resources:
  ExpireAccessKeyLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '30'
      Handler: ExpireAccessKeyLambda.lambda_handler
      Environment:
        Variables:
          GRACE_PERIOD: !Ref GracePeriod
          DISABLE_KEYS: !Ref DisableKeys
          SEND_EMAIL: !Ref SendEmail
          SENDER_EMAIL: !Ref SenderEmail
          SEND_REPORT: !Ref SendReport
          REPORT_TOPIC_ARN: !ImportValue us-east-1-AccountAlertTopics-SNSAlertsInfoArn
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: "aws-infra/master/RotateCredentials.zip"
  PeriodicEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 day)"
      Targets:
        - Arn: !GetAtt ExpireAccessKeyLambda.Arn
          Id: !Ref ExpireAccessKeyLambda
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PublishToCloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: EnableAndDisableAccessKeys
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:UpdateAccessKey
                Resource: "*"
        - PolicyName: AccessCredentialsReport
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:GenerateCredentialReport
                  - iam:GetCredentialReport
                Resource: "*"
        - PolicyName: AccessAccountInfo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                  - iam:ListAccountAliases
                  - iam:ListAccessKeys
                  - iam:GetAccountPasswordPolicy
                Resource: "*"
        - PolicyName: SendEmails
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
        - PolicyName: PublishSnsTopic
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !ImportValue us-east-1-AccountAlertTopics-SNSAlertsInfoArn
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExpireAccessKeyLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PeriodicEvent.Arn
  ExpireAccessKeyLambdaFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsErrorArn
      MetricName: !Sub "${ExpireAccessKeyLambda}-FailureAlarm"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ExpireAccessKeyLambda
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
Outputs:
  ExpireAccessKeyLambda:
    Value: !Ref ExpireAccessKeyLambda
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ExpireAccessKeyLambda'
